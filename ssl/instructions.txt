CA key and pem files generation :-

1. Generate CA key
openssl ecparam -name prime256v1 -genkey -noout -out cakey.key

2. Generate CA certificate
openssl req -x509 -new -nodes -key cakey.key -subj "/CN=TestCA/C=MY" -days 730 -out cacert.pem

Server key and pem files generation :-

1. Generate SSL certificate key
openssl ecparam -name prime256v1 -genkey -noout -out server.key

2. Create CSR configuration file (for server)
cat > csr.conf <<EOF
[ req ]
default_bits = 256
prompt = no
default_md = sha256
req_extensions = req_ext
distinguished_name = dn

[ dn ]
C = MY
CN = localhost

[ req_ext ]
keyUsage = keyEncipherment, dataEncipherment
extendedKeyUsage = serverAuth
subjectAltName = @alt_names

[ alt_names ]
DNS.1 = localhost
IP.1 = 127.0.0.1

EOF

3. Generate CSR (for server)
openssl req -new -key server.key -out server.csr -config csr.conf

4. Generate SSL certificate
openssl x509 -req -in server.csr -CA cacert.pem -CAkey cakey.key -CAcreateserial -out server.pem -days 90 -extfile csr.conf -extensions req_ext

Client key and pem files generation :-

1. Generate client certificate key
openssl ecparam -name prime256v1 -genkey -noout -out client.key

2. Create CSR configuration file (for client)
cat > csrclient.conf <<EOF
[ req ]
default_bits = 256
prompt = no
default_md = sha256
req_extensions = req_ext
distinguished_name = dn

[ dn ]
C = MY
CN = client

[ req_ext ]
keyUsage = keyEncipherment
extendedKeyUsage = clientAuth

EOF

3. Generate CSR (for client)
openssl req -new -key client.key -out client.csr -config csrclient.conf

4. Generate client certificate
openssl x509 -req -in client.csr -CA cacert.pem -CAkey cakey.key -CAcreateserial -out client.pem -days 90 -extfile csrclient.conf -extensions req_ext

